{"version":3,"sources":["App.tsx","Card/Card.tsx","DrawButton/DrawButton.tsx","reportWebVitals.ts","index.tsx"],"names":["viewport","styles","Card","props","height","viewportSize","className","style","src","this","card","imageaddress","alt","name","description","Component","DrawButton","drawCard","bind","Button","variant","onClick","App","updateViewportSize","updateCard","width","window","innerWidth","innerHeight","state","cards","currentCard","currentCards","data","addEventListener","setState","getRandomCard","Math","floor","random","length","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"u/HAYIA,E,gGCFAC,EAAS,GAiCEC,E,kDA9Bb,WAAYC,GAAe,IAAD,6BACxB,cAAMA,GACNF,EAAS,CACPG,OAAQD,EAAME,aAAaD,OAAS,KAHd,E,0CAO1B,WACE,OACE,qBAAKE,UAAU,iBAAiBC,MAAON,EAAvC,SACE,sBAAKK,UAAU,OAAOC,MAAON,EAA7B,UACE,qBAAKK,UAAU,QAAQC,MAAON,EAA9B,SACE,qBAAKK,UAAU,MAAMC,MAAON,EAA5B,SACE,qBACEO,IAAKC,KAAKN,MAAMO,KAAKC,aACrBC,IAAI,qBACJL,MAAON,QAIb,sBAAKK,UAAU,OAAOC,MAAON,EAA7B,UACE,qBAAKK,UAAU,MAAf,SAAsBG,KAAKN,MAAMO,KAAKG,OACtC,qBAAKP,UAAU,MAAf,SAAsBG,KAAKN,MAAMO,KAAKI,0B,GAvB/BC,a,QCgBJC,E,kDApBb,WAAYb,GAAe,IAAD,8BACxB,cAAMA,IACDc,SAAW,EAAKA,SAASC,KAAd,gBAFQ,E,4CAK1B,WACET,KAAKN,MAAMc,a,oBAGb,WACE,OACE,qBAAKX,UAAU,kBAAf,SACE,cAACa,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASZ,KAAKQ,SAA1C,6B,GAbiBF,a,QFMrBd,EAAS,GAuEEqB,E,kDAjEb,WAAYnB,GAAe,IAAD,8BACxB,cAAMA,IACDoB,mBAAqB,EAAKA,mBAAmBL,KAAxB,gBAC1B,EAAKM,WAAa,EAAKA,WAAWN,KAAhB,gBAElBlB,EAAW,CAAEyB,MAAOC,OAAOC,WAAYvB,OAAQsB,OAAOE,aACtD3B,EAAS,CAAEwB,MAAOC,OAAOC,WAAa,GAAIvB,OAAQsB,OAAOE,YAAc,IAEvE,EAAKC,MAAQ,CACXC,MAAO,CAAC,CAAEnB,aAAc,KACxBoB,YAAa,CAAEpB,aAAc,IAC7BX,SAAUA,GAXY,E,sDAe1B,WAEE,IAAMgC,EAA6BC,EAAKH,MACxCrB,KAAKc,qBACLG,OAAOQ,iBAAiB,SAAUzB,KAAKc,oBACvCd,KAAK0B,SAAS,CACZL,MAAOE,EACPD,YAAatB,KAAK2B,cAAcJ,O,2BAIpC,SAAcA,GAEZ,OADWA,EAAaK,KAAKC,MAAMD,KAAKE,SAAWP,EAAaQ,W,wBAIlE,WACE,IAAMR,EAAevB,KAAKoB,MAAMC,MAChCrB,KAAK0B,SAAS,CACZJ,YAAatB,KAAK2B,cAAcJ,O,gCAIpC,WACE,IAAM3B,EAAe,CACnBoB,MAAOC,OAAOC,WACdvB,OAAQsB,OAAOE,aAEjBnB,KAAK0B,SAAS,CACZnC,SAAUK,M,kCAId,WACEqB,OAAOe,oBAAoB,SAAUhC,KAAKc,sB,oBAG5C,WACE,OACE,sBAAKjB,UAAU,MAAMC,MAAON,EAA5B,UACE,qBAAKK,UAAU,UAAf,SACE,cAAC,EAAD,CAAYI,KAAMD,KAAKoB,MAAME,YAAa1B,aAAcL,MAE1D,qBAAKM,UAAU,YAAf,SACE,cAAC,EAAD,CAAYW,SAAUR,KAAKe,sB,GA/DnBT,aGDH2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.624637c5.chunk.js","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport \"./App.css\";\nimport Card from \"./Card/Card\";\nimport DrawButton from \"./DrawButton/DrawButton\";\nimport { ITarotCard } from \"./Interfaces/ICard\";\nimport data from \"./Data/tarot-cards.json\";\nimport { IViewportSize } from \"./Interfaces/IViewportSize\";\n\ninterface Props {\n  updateCard?: () => void;\n}\n\nvar viewport: IViewportSize;\nvar styles = {};\n\nclass App extends Component<\n  Props,\n  { cards: ITarotCard[]; currentCard: ITarotCard; viewport: IViewportSize }\n> {\n  constructor(props: Props) {\n    super(props);\n    this.updateViewportSize = this.updateViewportSize.bind(this);\n    this.updateCard = this.updateCard.bind(this);\n\n    viewport = { width: window.innerWidth, height: window.innerHeight };\n    styles = { width: window.innerWidth - 50, height: window.innerHeight - 10 };\n\n    this.state = {\n      cards: [{ imageaddress: \"\" }],\n      currentCard: { imageaddress: \"\" },\n      viewport: viewport,\n    };\n  }\n\n  componentWillMount() {\n    //gets called immediately after the constructor, before render()\n    const currentCards: ITarotCard[] = data.cards;\n    this.updateViewportSize();\n    window.addEventListener(\"resize\", this.updateViewportSize);\n    this.setState({\n      cards: currentCards,\n      currentCard: this.getRandomCard(currentCards),\n    });\n  }\n\n  getRandomCard(currentCards: ITarotCard[]) {\n    var card = currentCards[Math.floor(Math.random() * currentCards.length)];\n    return card;\n  }\n\n  updateCard() {\n    const currentCards = this.state.cards;\n    this.setState({\n      currentCard: this.getRandomCard(currentCards),\n    });\n  }\n\n  updateViewportSize() {\n    const viewportSize = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n    this.setState({\n      viewport: viewportSize,\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateViewportSize);\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style={styles}>\n        <div className=\"cardRow\">\n          <Card {...{ card: this.state.currentCard, viewportSize: viewport }} />\n        </div>\n        <div className=\"buttonRow\">\n          <DrawButton drawCard={this.updateCard} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React, { Component, useContext } from \"react\";\r\nimport { ITarotCard } from \"../Interfaces/ICard\";\r\nimport { IViewportSize } from \"../Interfaces/IViewportSize\";\r\nimport \"./TarotCard.css\";\r\n\r\ninterface Props {\r\n  card: ITarotCard;\r\n  viewportSize: IViewportSize;\r\n}\r\n\r\nvar styles = {};\r\n\r\nclass Card extends Component<Props, {}> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    styles = {\r\n      height: props.viewportSize.height - 100,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card-container\" style={styles}>\r\n        <div className=\"card\" style={styles}>\r\n          <div className=\"front\" style={styles}>\r\n            <div className=\"eng\" style={styles}>\r\n              <img\r\n                src={this.props.card.imageaddress}\r\n                alt=\"img link is broken\"\r\n                style={styles}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"back\" style={styles}>\r\n            <div className=\"han\">{this.props.card.name}</div>\r\n            <div className=\"pin\">{this.props.card.description}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ninterface Props {\r\n  drawCard: () => void;\r\n}\r\n\r\nclass DrawButton extends Component<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.drawCard = this.drawCard.bind(this);\r\n  }\r\n\r\n  drawCard() {\r\n    this.props.drawCard();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"buttonContainer\">\r\n        <Button variant=\"contained\" onClick={this.drawCard}>\r\n          Draw Card\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrawButton;\r\n\r\n//        <button className=\"btn\" >\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}