{"version":3,"sources":["App.tsx","Card/Card.tsx","reportWebVitals.ts","index.tsx"],"names":["viewport","TarotCard","props","height","viewportSize","className","Card","CardContent","Container","maxWidth","src","this","card","imageaddress","alt","Component","App","updateViewportSize","bind","updateCard","width","window","innerWidth","innerHeight","state","cards","currentCard","currentCards","data","addEventListener","setState","getRandomCard","Math","floor","random","length","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k+HAaIA,E,uHCiCWC,E,kDA9Bb,WAAYC,GAAe,IAAD,6BACxB,cAAMA,GACG,CACPC,OAAQD,EAAME,aAAaD,OAAS,KAHd,E,0CAU1B,WACE,OACE,qBAAKE,UAAU,iBAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,qBAAKJ,UAAU,QAAf,SACE,qBACEK,IAAKC,KAAKT,MAAMU,KAAKC,aACrBC,IAAI,qC,GApBEC,a,QDsETC,E,kDAjEb,WAAYd,GAAe,IAAD,8BACxB,cAAMA,IACDe,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAElBlB,EAAW,CAAEoB,MAAOC,OAAOC,WAAYnB,OAAQkB,OAAOE,aAC7C,CAAEH,MAAOC,OAAOC,WAAa,GAAInB,OAAQkB,OAAOE,YAAc,IAEvE,EAAKC,MAAQ,CACXC,MAAO,CAAC,CAAEZ,aAAc,KACxBa,YAAa,CAAEb,aAAc,IAC7Bb,SAAUA,GAXY,E,sDAe1B,WAEE,IAAM2B,EAA6BC,EAAKH,MACxCd,KAAKM,qBACLI,OAAOQ,iBAAiB,SAAUlB,KAAKM,oBACvCN,KAAKmB,SAAS,CACZL,MAAOE,EACPD,YAAaf,KAAKoB,cAAcJ,O,2BAIpC,SAAcA,GAEZ,OADWA,EAAaK,KAAKC,MAAMD,KAAKE,SAAWP,EAAaQ,W,wBAIlE,WACE,IAAMR,EAAehB,KAAKa,MAAMC,MAChCd,KAAKmB,SAAS,CACZJ,YAAaf,KAAKoB,cAAcJ,O,gCAIpC,WACE,IAAMvB,EAAe,CACnBgB,MAAOC,OAAOC,WACdnB,OAAQkB,OAAOE,aAEjBZ,KAAKmB,SAAS,CACZ9B,SAAUI,M,kCAId,WACEiB,OAAOe,oBAAoB,SAAUzB,KAAKM,sB,oBAG5C,WACE,OAEE,aADA,CACA,OAAKZ,UAAU,MAAf,SAEE,cAACG,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC,EAAD,CAAYG,KAAMD,KAAKa,MAAME,YAAatB,aAAcJ,Y,GA9DhDe,aEFHsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dc6ad80d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import \"./App.css\";\nimport Card from \"./Card/Card\";\nimport DrawButton from \"./DrawButton/DrawButton\";\nimport { ITarotCard } from \"./Interfaces/ICard\";\nimport data from \"./Data/tarot-cards.json\";\nimport { IViewportSize } from \"./Interfaces/IViewportSize\";\nimport { Container } from \"@material-ui/core\";\n\ninterface Props {\n  updateCard?: () => void;\n}\n\nvar viewport: IViewportSize;\nvar styles = {};\n\nclass App extends Component<\n  Props,\n  { cards: ITarotCard[]; currentCard: ITarotCard; viewport: IViewportSize }\n> {\n  constructor(props: Props) {\n    super(props);\n    this.updateViewportSize = this.updateViewportSize.bind(this);\n    this.updateCard = this.updateCard.bind(this);\n\n    viewport = { width: window.innerWidth, height: window.innerHeight };\n    styles = { width: window.innerWidth - 50, height: window.innerHeight - 30 };\n\n    this.state = {\n      cards: [{ imageaddress: \"\" }],\n      currentCard: { imageaddress: \"\" },\n      viewport: viewport,\n    };\n  }\n\n  componentWillMount() {\n    //gets called immediately after the constructor, before render()\n    const currentCards: ITarotCard[] = data.cards;\n    this.updateViewportSize();\n    window.addEventListener(\"resize\", this.updateViewportSize);\n    this.setState({\n      cards: currentCards,\n      currentCard: this.getRandomCard(currentCards),\n    });\n  }\n\n  getRandomCard(currentCards: ITarotCard[]) {\n    var card = currentCards[Math.floor(Math.random() * currentCards.length)];\n    return card;\n  }\n\n  updateCard() {\n    const currentCards = this.state.cards;\n    this.setState({\n      currentCard: this.getRandomCard(currentCards),\n    });\n  }\n\n  updateViewportSize() {\n    const viewportSize = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n    this.setState({\n      viewport: viewportSize,\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateViewportSize);\n  }\n\n  render() {\n    return (\n      // <div className=\"App\" style={styles}>\n      <div className=\"App\">\n        {/* <div className=\"cardRow\"> */}\n        <Container maxWidth=\"sm\">\n          <Card {...{ card: this.state.currentCard, viewportSize: viewport }} />\n        </Container>\n        {/* </div> */}\n      </div>\n    );\n  }\n}\nexport default App;\n","import { Container } from \"@material-ui/core\";\r\nimport React, { Component, useContext } from \"react\";\r\nimport { ITarotCard } from \"../Interfaces/ICard\";\r\nimport { IViewportSize } from \"../Interfaces/IViewportSize\";\r\nimport \"./TarotCard.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\ninterface Props {\r\n  card: ITarotCard;\r\n  viewportSize: IViewportSize;\r\n}\r\n\r\nvar styles = {};\r\n\r\nclass TarotCard extends Component<Props, {}> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    styles = {\r\n      height: props.viewportSize.height - 100,\r\n    };\r\n  }\r\n\r\n  // const classes = useStyles();\r\n\r\n  /* <Card className={classes.root}> */\r\n  render() {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <Card>\r\n          <CardContent>\r\n            <Container maxWidth=\"sm\">\r\n              <div className=\"front\">\r\n                <img\r\n                  src={this.props.card.imageaddress}\r\n                  alt=\"img link is broken\"\r\n                />\r\n              </div>\r\n            </Container>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TarotCard;\r\n\r\n/*\r\n<div className=\"card-container\" style={styles}>\r\n   <div className=\"card\" style={styles}>\r\n     <div className=\"front\" style={styles}>\r\n       <div className=\"eng\" style={styles}>\r\n <div className=\"card-container\">\r\n   <div className=\"card\">\r\n     <div className=\"front\">\r\n       <div className=\"eng\">\r\n        <img\r\n          src={this.props.card.imageaddress}\r\n          alt=\"img link is broken\"\r\n        />\r\n       </div>\r\n     </div>\r\n    { <div className=\"back\" style={styles}> }\r\n     <div className=\"back\">\r\n      <div className=\"han\">{this.props.card.name}</div>\r\n      <div className=\"pin\">{this.props.card.description}</div>\r\n     </div>\r\n   </div>\r\n </div>\r\n */\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}