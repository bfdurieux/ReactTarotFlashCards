{"version":3,"sources":["Card/Card.tsx","App.tsx","DrawButton/DrawButton.tsx","reportWebVitals.ts","Footer/Footer.tsx","index.tsx"],"names":["styles","view","TarotCard","props","showDescription","setState","showComponent","state","height","viewportSize","width","bind","this","isEmpty","Box","bgcolor","display","className","style","Card","CardContent","Container","maxWidth","src","card","imageaddress","alt","onClick","TransitionsModal","Component","modalStyles","makeStyles","theme","createStyles","modal","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","classes","React","useState","open","setOpen","type","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","id","name","description","viewport","DrawButton","drawCard","margin","Button","variant","App","updateViewportSize","updateCard","window","innerWidth","innerHeight","cards","currentCard","currentCards","data","addEventListener","getRandomCard","Math","floor","random","length","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FooterEx","textAlign","Divider","Grid","container","justify","item","xs","sm","md","Typography","align","gutterBottom","color","defaultProps","ReactDOM","render","StrictMode","Footer","document","getElementById"],"mappings":"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","file":"static/js/main.5e9f07f4.chunk.js","sourcesContent":["import { Backdrop, Box, Container, createStyles, Fade, makeStyles, Modal, Theme } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { ITarotCard } from \"../Interfaces/ICard\";\r\nimport { IViewportSize } from \"../Interfaces/IViewportSize\";\r\nimport \"./TarotCard.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\ninterface Props {\r\n  card: ITarotCard;\r\n  viewportSize: IViewportSize;\r\n  isEmpty: boolean;\r\n}\r\n\r\nvar styles = {};\r\nvar mui = {};\r\nvar view = {};\r\n\r\n\r\nclass TarotCard extends Component<Props, {showComponent: boolean}> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    styles = {\r\n      height: props.viewportSize.height - 130,\r\n    };\r\n    mui = {\r\n      width: \"min-content\",\r\n    };\r\n    view = {\r\n      height: props.viewportSize.height - 130,\r\n      width: \"min-content\",\r\n    };\r\n    this.state = {\r\n      showComponent: false,\r\n    };\r\n    this.showDescription  = this.showDescription.bind(this);\r\n  }\r\n\r\n  showDescription = () => {\r\n    this.setState({\r\n      showComponent: !this.state.showComponent,\r\n    });\r\n  }\r\n\r\n  // const classes = useStyles();\r\n\r\n  /* <Card className={classes.root}> */\r\n\r\n  render() {\r\n    if (!this.props.isEmpty) {\r\n      return (\r\n        <Box bgcolor=\"green\" display=\"flex\" width=\"min-content\">\r\n          <div className=\"card-container\" style={view}>\r\n            <Card className=\"card-ui\" style={view}>\r\n              <CardContent>\r\n                <Container maxWidth={false}>\r\n                  <div className=\"front\">\r\n                    <img\r\n                      src={this.props.card.imageaddress}\r\n                      alt=\"img link is broken\"\r\n                      style={styles}\r\n                      onClick={this.showDescription}\r\n                    />\r\n                    {this.state.showComponent ?\r\n                      <TransitionsModal {...this.props} /> :\r\n                        null\r\n                    }\r\n                  </div>\r\n                </Container>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </Box>\r\n      )\r\n    } else {\r\n      return (\r\n        <Box bgcolor=\"green\" display=\"flex\" width=\"min-content\">\r\n          <div className=\"card-container\" style={view}>\r\n            \r\n          </div>\r\n        </Box>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default TarotCard;\r\n\r\n/*\r\n<div className=\"card-container\" style={styles}>\r\n   <div className=\"card\" style={styles}>\r\n     <div className=\"front\" style={styles}>\r\n       <div className=\"eng\" style={styles}>\r\n <div className=\"card-container\">\r\n   <div className=\"card\">\r\n     <div className=\"front\">\r\n       <div className=\"eng\">\r\n        <img\r\n          src={this.props.card.imageaddress}\r\n          alt=\"img link is broken\"\r\n        />\r\n       </div>\r\n     </div>\r\n    { <div className=\"back\" style={styles}> }\r\n     <div className=\"back\">\r\n      <div className=\"han\">{this.props.card.name}</div>\r\n      <div className=\"pin\">{this.props.card.description}</div>\r\n     </div>\r\n   </div>\r\n </div>\r\n */\r\n\r\n const modalStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    modal: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }),\r\n);\r\n\r\n function TransitionsModal(props:Props) {\r\n  const classes = modalStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={handleOpen}>\r\n        react-transition-group\r\n      </button>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <h2 id=\"transition-modal-title\">{props.card.name}</h2>\r\n            <p id=\"transition-modal-description\">{props.card.description}</p>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport TarotCard from \"./Card/Card\";\r\nimport DrawButton from \"./DrawButton/DrawButton\";\r\nimport { ITarotCard } from \"./Interfaces/ICard\";\r\nimport data from \"./Data/tarot-cards.json\";\r\nimport { IViewportSize } from \"./Interfaces/IViewportSize\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\n\r\ninterface Props {\r\n  updateCard?: () => void;\r\n}\r\n\r\nvar viewport: IViewportSize;\r\nvar styles = {};\r\nvar isEmpty: boolean;\r\n\r\nclass App extends Component<\r\n  Props,\r\n  { cards: ITarotCard[]; currentCard: ITarotCard; viewport: IViewportSize }\r\n> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.updateViewportSize = this.updateViewportSize.bind(this);\r\n    this.updateCard = this.updateCard.bind(this);\r\n    isEmpty = true;\r\n\r\n    viewport = { width: window.innerWidth, height: window.innerHeight };\r\n    styles = { width: window.innerWidth - 50, height: window.innerHeight - 30 };\r\n\r\n    this.state = {\r\n      cards: [{ imageaddress: \"\" }],\r\n      currentCard: { imageaddress: \"\" },\r\n      viewport: viewport,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    //gets called immediately after the constructor, before render()\r\n    const currentCards: ITarotCard[] = data.cards;\r\n    this.updateViewportSize();\r\n    window.addEventListener(\"resize\", this.updateViewportSize);\r\n    this.setState({\r\n      cards: currentCards,\r\n      currentCard: this.getRandomCard(currentCards),\r\n    });\r\n  }\r\n\r\n  getRandomCard(currentCards: ITarotCard[]) {\r\n    var card = currentCards[Math.floor(Math.random() * currentCards.length)];\r\n    return card;\r\n  }\r\n\r\n  updateCard() {\r\n    isEmpty = false;\r\n    const currentCards = this.state.cards;\r\n    this.setState({\r\n      currentCard: this.getRandomCard(currentCards),\r\n    });\r\n  }\r\n\r\n  updateViewportSize() {\r\n    const viewportSize = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    };\r\n    this.setState({\r\n      viewport: viewportSize,\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateViewportSize);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      // <div className=\"App\" style={styles}>\r\n      <div className=\"App\">\r\n        {/* <div className=\"cardRow\"> */}\r\n        <Container maxWidth=\"sm\">\r\n          <TarotCard {...{ card: this.state.currentCard, viewportSize: viewport, isEmpty }} />\r\n          <DrawButton drawCard={this.updateCard} />\r\n        </Container>\r\n        {/* </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ninterface Props {\r\n  drawCard: () => void;\r\n}\r\n\r\nvar styles = {};\r\n\r\nclass DrawButton extends Component<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.drawCard = this.drawCard.bind(this);\r\n    styles = {\r\n      margin: 5,\r\n    };\r\n  }\r\n\r\n  drawCard() {\r\n    this.props.drawCard();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"buttonContainer\">\r\n        <Button variant=\"contained\" onClick={this.drawCard} style={styles}>\r\n          Draw Card\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrawButton;\r\n\r\n//        <button className=\"btn\" >\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst FooterEx = () => (\r\n  <div style={{ maxWidth: 700, margin: \"auto\", textAlign: \"center\" }}>\r\n    <Divider style={{ margin: \"24px auto\", width: 60 }} />\r\n    <Grid container justify={\"center\"} spacing={2}>\r\n      <Grid item xs={12} sm={6} md={3}>\r\n        <Typography align={\"center\"} gutterBottom color={\"textSecondary\"}>\r\n          About\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={3}>\r\n        <Typography align={\"center\"} gutterBottom color={\"textSecondary\"}>\r\n          Sources\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  </div>\r\n);\r\n\r\nFooterEx.propTypes = {};\r\nFooterEx.defaultProps = {};\r\n\r\nexport default FooterEx;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Footer from \"./Footer/Footer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    <Footer />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}