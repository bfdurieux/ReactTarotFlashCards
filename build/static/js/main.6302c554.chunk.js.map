{"version":3,"sources":["Card/Card.tsx","DrawButton/DrawButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","src","this","imageaddress","alt","name","description","Component","DrawButton","drawCard","bind","onClick","App","updateCard","state","cards","currentCard","currentCards","data","setState","getRandomCard","Math","floor","random","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA4BeA,E,kDAvBb,WAAYC,GAAoB,uCACxBA,G,0CAGR,WACE,OACE,qBAAKC,UAAU,iBAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,QAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKC,IAAKC,KAAKH,MAAMI,aAAcC,IAAI,2BAG3C,sBAAKJ,UAAU,OAAf,UACE,qBAAKA,UAAU,MAAf,SAAsBE,KAAKH,MAAMM,OACjC,qBAAKL,UAAU,MAAf,SAAsBE,KAAKH,MAAMO,0B,GAhB1BC,aCuBJC,E,kDApBb,WAAYT,GAAe,IAAD,8BACxB,cAAMA,IACDU,SAAW,EAAKA,SAASC,KAAd,gBAFQ,E,4CAK1B,WACER,KAAKH,MAAMU,a,oBAGb,WACE,OACE,qBAAKT,UAAU,kBAAf,SACE,wBAAQA,UAAU,MAAMW,QAAST,KAAKO,SAAtC,6B,GAbiBF,a,OCuDVK,E,kDA9Cb,WAAYb,GAAe,IAAD,8BACxB,cAAMA,IAEDc,WAAa,EAAKA,WAAWH,KAAhB,gBAElB,EAAKI,MAAQ,CACXC,MAAO,CAAC,CAAEZ,aAAc,KACxBa,YAAa,CAAEb,aAAc,KAPP,E,sDAW1B,WAEE,IAAMc,EAA6BC,EAAKH,MAExCb,KAAKiB,SAAS,CACZJ,MAAOE,EACPD,YAAad,KAAKkB,cAAcH,O,2BAIpC,SAAcA,GAEZ,OADWA,EAAaI,KAAKC,MAAMD,KAAKE,SAAWN,EAAaO,W,wBAIlE,WACE,IAAMP,EAAef,KAAKY,MAAMC,MAChCb,KAAKiB,SAAS,CACZH,YAAad,KAAKkB,cAAcH,O,oBAIpC,WACE,OACE,sBAAKjB,UAAU,MAAf,UACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,eAAUE,KAAKY,MAAME,gBAEvB,qBAAKhB,UAAU,YAAf,SACE,cAAC,EAAD,CAAYS,SAAUP,KAAKW,sB,GA5CnBN,aCGHkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6302c554.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { ITarotCard } from \"../Interfaces/ICard\";\r\nimport \"./TarotCard.css\";\r\n\r\nclass Card extends Component<ITarotCard, {}> {\r\n  constructor(props: ITarotCard) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <div className=\"card\">\r\n          <div className=\"front\">\r\n            <div className=\"eng\">\r\n              <img src={this.props.imageaddress} alt=\"img link is broken\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"back\">\r\n            <div className=\"han\">{this.props.name}</div>\r\n            <div className=\"pin\">{this.props.description}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\n\r\ninterface Props {\r\n  drawCard: () => void;\r\n}\r\n\r\nclass DrawButton extends Component<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.drawCard = this.drawCard.bind(this);\r\n  }\r\n\r\n  drawCard() {\r\n    this.props.drawCard();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"buttonContainer\">\r\n        <button className=\"btn\" onClick={this.drawCard}>\r\n          Draw Card\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrawButton;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Card from \"./Card/Card\";\nimport DrawButton from \"./DrawButton/DrawButton\";\nimport { ITarotCard } from \"./Interfaces/ICard\";\nimport data from \"./Data/tarot-cards.json\";\n\ninterface Props {\n  updateCard?: () => void;\n}\n\nclass App extends Component<\n  Props,\n  { cards: ITarotCard[]; currentCard: ITarotCard }\n> {\n  constructor(props: Props) {\n    super(props);\n\n    this.updateCard = this.updateCard.bind(this);\n\n    this.state = {\n      cards: [{ imageaddress: \"\" }],\n      currentCard: { imageaddress: \"\" },\n    };\n  }\n\n  componentWillMount() {\n    //gets called immediately after the constructor, before render()\n    const currentCards: ITarotCard[] = data.cards;\n\n    this.setState({\n      cards: currentCards,\n      currentCard: this.getRandomCard(currentCards),\n    });\n  }\n\n  getRandomCard(currentCards: ITarotCard[]) {\n    var card = currentCards[Math.floor(Math.random() * currentCards.length)];\n    return card;\n  }\n\n  updateCard() {\n    const currentCards = this.state.cards;\n    this.setState({\n      currentCard: this.getRandomCard(currentCards),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"cardRow\">\n          <Card {...this.state.currentCard} />\n        </div>\n        <div className=\"buttonRow\">\n          <DrawButton drawCard={this.updateCard} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}