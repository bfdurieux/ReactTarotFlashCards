{"version":3,"sources":["FlippingCard/FlippingCard.tsx","Spreads/SingleSpread/SingleSpread.tsx","Card/Card.tsx","DrawButton/DrawButton.tsx","Spreads/ThreeSpread/ThreeSpread.tsx","navbar.tsx","App.tsx","reportWebVitals.ts","Footer/Footer.tsx","index.tsx"],"names":["FlippingCard","props","showDescription","setState","showComponent","state","spin","isClicked","pullAgain","updateCard","cards","imageaddress","currentCard","bind","currentCards","data","this","getRandomCard","Math","floor","random","length","className","onClick","src","alt","TransitionsModal","isEmpty","card","Button","variant","Component","modalStyles","makeStyles","theme","createStyles","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","classes","React","useState","open","setOpen","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","id","name","description","SingleSpread","width","window","innerWidth","height","innerHeight","Container","maxWidth","styles","view","TarotCard","Box","bgcolor","style","Card","CardContent","type","isEmpty1","isEmpty2","isEmpty3","DrawButton","drawCard","margin","ThreeSpread","updateCard1","updateCard2","updateCard3","currentCard1","currentCard2","currentCard3","useStyles","root","flexGrow","color","CenteredTabs","value","setValue","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","TabPanel","index","Single","Three","Celtic","Paper","children","p","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FooterEx","textAlign","Divider","Grid","container","justify","item","xs","sm","md","Typography","align","gutterBottom","defaultProps","ReactDOM","render","StrictMode","Footer","document","getElementById"],"mappings":"47JAsGeA,E,kDAxFX,WAAYC,GAAe,IAAD,8BACtB,cAAMA,IAmCVC,gBAAkB,WAEd,EAAKC,SAAS,CACZC,eAAgB,EAAKC,MAAMD,iBAvCP,EA2CxBE,KAAO,WACL,EAAKH,SAAS,CAACI,WAAW,KA5CJ,EA+CxBC,UAAY,WACV,EAAKL,SAAS,CAACI,WAAW,IAC1B,EAAKE,cA7CL,EAAKJ,MAAQ,CACTD,eAAe,EACfM,MAAO,CAAC,CAAEC,aAAc,KACxBC,YAAa,CAAED,aAAc,IAC7BJ,WAAW,GAEb,EAAKL,gBAAmB,EAAKA,gBAAgBW,KAArB,gBAVJ,E,sDAa1B,WAEI,IAAMC,EAA6BC,EAAKL,MAExCM,KAAKb,SAAS,CACZO,MAAOI,EACPF,YAAaI,KAAKC,cAAcH,O,2BAIpC,SAAcA,GAEZ,OADWA,EAAaI,KAAKC,MAAMD,KAAKE,SAAWN,EAAaO,W,wBAIlE,WAEE,IAAMP,EAAeE,KAAKX,MAAMK,MAChCM,KAAKb,SAAS,CACZS,YAAaI,KAAKC,cAAcH,O,oBAoBtC,WACE,OACE,qCACA,qBAAKQ,UAAU,iBAAiBC,QAASP,KAAKV,KAA9C,SAEEU,KAAKX,MAAME,UACX,sBAAKe,UAAU,YAAf,UAEM,qBACEE,IAAKR,KAAKX,MAAMO,YAAYD,aAC5Bc,IAAI,qBACJF,QAASP,KAAKd,kBAEfc,KAAKX,MAAMD,cACZ,cAACsB,EAAD,CAAuBC,SAAQ,EAAOC,KAAKZ,KAAKX,MAAMO,cACtD,QAGN,qBAAKU,UAAU,aAAf,SACE,sBAAMA,UAAU,YAAhB,oCAMJ,qBAAKA,UAAU,SAAf,SACEN,KAAKX,MAAME,UACX,cAACsB,EAAA,EAAD,CAAQC,QAAQ,YAAYP,QAASP,KAAKR,UAA1C,wBACA,c,GAjFiBuB,aA2FrBC,EAAcC,aAAW,SAACC,GAAD,OAC/BC,YAAa,CACXC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLC,gBAAiBP,EAAMQ,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWX,EAAMY,QAAQ,GACzBC,QAASb,EAAMc,QAAQ,EAAG,EAAG,SAMjC,SAAStB,EAAiBzB,GACtB,IAAMgD,EAAUjB,IAChB,EAAwBkB,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAWA,OACE,8BACE,cAACC,EAAA,EAAD,CACEC,kBAAgB,yBAChBC,mBAAiB,+BACjBlC,UAAW2B,EAAQb,MACnBgB,KAAMA,EACNK,QAXc,WAClBJ,GAASD,IAWLM,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,KATb,SAYE,cAACC,EAAA,EAAD,CAAMC,GAAIZ,EAAV,SACE,sBAAK9B,UAAW2B,EAAQT,MAAxB,UACE,oBAAIyB,GAAG,yBAAP,SAAiChE,EAAM2B,KAAKsC,OAC5C,mBAAGD,GAAG,+BAAN,SAAsChE,EAAM2B,KAAKuC,uBC1I/D,IAyDeC,E,kDAlDb,WAAYnE,GAAe,IAAD,8BACxB,cAAMA,IAEDQ,WAAa,EAAKA,WAAWI,KAAhB,iBACR,EAED,CAAEwD,MAAOC,OAAOC,WAAa,GAAIC,OAAQF,OAAOG,YAAc,IAEvE,EAAKpE,MAAQ,CACXK,MAAO,CAAC,CAAEC,aAAc,KACxBC,YAAa,CAAED,aAAc,KAVP,E,sDAc1B,WAEE,IAAMG,EAA6BC,EAAKL,MAExCM,KAAKb,SAAS,CACZO,MAAOI,EACPF,YAAaI,KAAKC,cAAcH,O,2BAIpC,SAAcA,GAEZ,OADWA,EAAaI,KAAKC,MAAMD,KAAKE,SAAWN,EAAaO,W,wBAIlE,YACY,EACV,IAAMP,EAAeE,KAAKX,MAAMK,MAChCM,KAAKb,SAAS,CACZS,YAAaI,KAAKC,cAAcH,O,oBAIpC,WACE,OAEE,aADA,CACA,OAAKQ,UAAU,SAAf,SAEE,cAACoD,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC,EAAD,CAAmBhD,SAAQ,EAAKC,KAAK,a,GA/CpBG,a,kCCJvB6C,EAAS,GAETC,EAAO,GA6DIC,E,kDAzDb,WAAY7E,GAAe,IAAD,8BACxB,cAAMA,IAQRC,gBAAkB,WAChB,EAAKC,SAAS,CACZC,eAAgB,EAAKC,MAAMD,iBAR7B,EAAKC,MAAQ,CACXD,eAAe,GAEjB,EAAKF,gBAAmB,EAAKA,gBAAgBW,KAArB,gBANA,E,0CAmB1B,WACE,OAAKG,KAAKf,MAAM0B,QA2BZ,cAACoD,EAAA,EAAD,CAAKC,QAAQ,QAAQ3C,QAAQ,OAAOgC,MAAM,cAA1C,SACE,qBAAK/C,UAAU,iBAAiB2D,MAAOJ,MA1BzC,cAACE,EAAA,EAAD,CAAKC,QAAQ,QAAQ3C,QAAQ,OAAOgC,MAAM,cAA1C,SACE,qBAAK/C,UAAU,iBAAiB2D,MAAOJ,EAAvC,SACE,cAACK,EAAA,EAAD,CAAM5D,UAAU,UAAU2D,MAAOJ,EAAjC,SACE,cAACM,EAAA,EAAD,UACE,cAACT,EAAA,EAAD,CAAWC,UAAU,EAArB,SACE,sBAAKrD,UAAU,QAAf,UACE,qBACEE,IAAKR,KAAKf,MAAM2B,KAAKjB,aACrBc,IAAI,qBACJwD,MAAOL,EACPrD,QAASP,KAAKd,kBAEfc,KAAKX,MAAMD,cACV,cAAC,EAAD,eAAsBY,KAAKf,QACzB,sB,GArCA8B,aAoFjBC,EAAcC,aAAW,SAACC,GAAD,OAC9BC,YAAa,CACXC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLC,gBAAiBP,EAAMQ,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWX,EAAMY,QAAQ,GACzBC,QAASb,EAAMc,QAAQ,EAAG,EAAG,SAKlC,SAAStB,EAAiBzB,GACzB,IAAMgD,EAAUjB,IAChB,EAAwBkB,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAUA,OACE,gCACE,wBAAQ+B,KAAK,SAAS7D,QAVP,WACjB8B,GAASD,IASP,oCAGA,cAACE,EAAA,EAAD,CACEC,kBAAgB,yBAChBC,mBAAiB,+BACjBlC,UAAW2B,EAAQb,MACnBgB,KAAMA,EACNK,QAdc,WAClBJ,GAASD,IAcLM,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,KATb,SAYE,cAACC,EAAA,EAAD,CAAMC,GAAIZ,EAAV,SACE,sBAAK9B,UAAW2B,EAAQT,MAAxB,UACE,oBAAIyB,GAAG,yBAAP,SAAiChE,EAAM2B,KAAKsC,OAC5C,mBAAGD,GAAG,+BAAN,SAAsChE,EAAM2B,KAAKuC,wBC9I7D,ICIIkB,EACAC,EACAC,EDNAX,EAAS,GA0BEY,E,kDAvBb,WAAYvF,GAAe,IAAD,8BACxB,cAAMA,IACDwF,SAAW,EAAKA,SAAS5E,KAAd,gBAChB+D,EAAS,CACPc,OAAQ,GAJc,E,4CAQ1B,WACE1E,KAAKf,MAAMwF,a,oBAGb,WACE,OACE,qBAAKnE,UAAU,kBAAf,SACE,cAACO,EAAA,EAAD,CAAQC,QAAQ,YAAYP,QAASP,KAAKyE,SAAUR,MAAOL,EAA3D,6B,GAhBiB7C,aC0FV4D,G,wDAhFX,WAAY1F,GAAe,IAAD,8BACtB,cAAMA,IAED2F,YAAc,EAAKA,YAAY/E,KAAjB,gBACnB,EAAKgF,YAAc,EAAKA,YAAYhF,KAAjB,gBACnB,EAAKiF,YAAc,EAAKD,YAAYhF,KAAjB,gBACnBwE,GAAW,EACXC,GAAW,EACXC,GAAW,EAEX,EAAKlF,MAAQ,CACTK,MAAO,CAAC,CAAEC,aAAc,KACxBoF,aAAc,CAAEpF,aAAc,IAC9BqF,aAAc,CAAErF,aAAc,IAC9BsF,aAAc,CAAEtF,aAAc,KAdZ,E,sDAkB1B,WAEI,IAAMG,EAA6BC,EAAKL,MAExCM,KAAKb,SAAS,CACVO,MAAOI,EACPiF,aAAc/E,KAAKC,cAAcH,GACjCkF,aAAchF,KAAKC,cAAcH,GACjCmF,aAAcjF,KAAKC,cAAcH,O,2BAKzC,SAAcA,GAEV,OADWA,EAAaI,KAAKC,MAAMD,KAAKE,SAAWN,EAAaO,W,yBAIpE,WACI,IAAMP,EAAeE,KAAKX,MAAMK,MAChC2E,GAAW,EACXrE,KAAKb,SAAS,CACV4F,aAAc/E,KAAKC,cAAcH,O,yBAGzC,WACI,IAAMA,EAAeE,KAAKX,MAAMK,MAEhC4E,GAAW,EACXtE,KAAKb,SAAS,CACV6F,aAAchF,KAAKC,cAAcH,O,yBAGzC,WACI,IAAMA,EAAeE,KAAKX,MAAMK,MAChC6E,GAAW,EACXvE,KAAKb,SAAS,CAEV8F,aAAcjF,KAAKC,cAAcH,O,oBAIzC,WACI,OACI,sBAAKQ,UAAU,iBAAf,UACI,sBAAKA,UAAU,YAAf,UACI,cAAC,EAAD,CAAiBM,KAAMZ,KAAKX,MAAM0F,aAAcpE,QAAS0D,IACzD,cAAC,EAAD,CAAYI,SAAUzE,KAAK4E,iBAE/B,sBAAKtE,UAAU,YAAf,UACI,cAAC,EAAD,CAAiBM,KAAMZ,KAAKX,MAAM2F,aAAcrE,QAAS2D,IACzD,cAAC,EAAD,CAAYG,SAAUzE,KAAK6E,iBAE/B,sBAAKvE,UAAU,YAAf,UACI,cAAC,EAAD,CAAiBM,KAAMZ,KAAKX,MAAM4F,aAActE,QAAS4D,IACzD,cAAC,EAAD,CAAYE,SAAUzE,KAAK8E,wB,GA7ErB/D,cCLpBmE,EAAYjE,YAAW,CAC3BkE,KAAM,CACJC,SAAU,EACVC,MAAO,SAII,SAASC,IACtB,IAAMrD,EAAUiD,IAChB,EAA0BhD,IAAMC,SAAS,GAAzC,mBAAOoD,EAAP,KAAcC,EAAd,KAMA,OACE,sBAAKlF,UAAW2B,EAAQkD,KAAxB,UACE,eAACM,EAAA,EAAD,CACEF,MAAOA,EACPG,SARe,SAACC,EAA8BC,GAClDJ,EAASI,IAQLC,eAAe,UACfC,UAAU,UACVC,UAAQ,EALV,UAOE,cAACC,EAAA,EAAD,CAAKC,MAAM,WACX,cAACD,EAAA,EAAD,CAAKC,MAAM,UACX,cAACD,EAAA,EAAD,CAAKC,MAAM,oBAGb,cAACC,EAAD,CAAUX,MAAOA,EAAOY,MAAO,EAA/B,SACE,cAACC,EAAD,MAEF,cAACF,EAAD,CAAUX,MAAOA,EAAOY,MAAO,EAA/B,SACE,cAACE,EAAD,MAEF,cAACH,EAAD,CAAUX,MAAOA,EAAOY,MAAO,EAA/B,SACE,cAACG,EAAD,SAMR,SAASF,IACL,OACE,qBAAKnC,MAAO,CAAET,OAAO,KAArB,SACE,cAAC,EAAD,MAKN,SAAS6C,IACP,OACE,qBAAKpC,MAAO,CAAET,OAAO,KAArB,SACE,cAAC,EAAD,MAMN,SAAS8C,IACP,OACE,cAACC,EAAA,EAAD,UACE,6CAUN,SAASL,EAASjH,GAChB,IAAQuH,EAA2BvH,EAA3BuH,SAAUjB,EAAiBtG,EAAjBsG,MAAOY,EAAUlH,EAAVkH,MACzB,OACE,8BACGZ,IAAUY,GAAS,cAACpC,EAAA,EAAD,CAAK0C,EAAG,EAAR,SAAYD,M,IC5CzBE,E,kDAtBb,WAAYzH,GAAe,uCACnBA,G,sDAIR,c,oBAKA,WACE,OAEE,aADA,CACA,OAAKqB,UAAU,MAAf,SACE,cAACgF,EAAD,U,GAlBUvE,aCFH4F,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4BCJRQ,GAAW,kBACf,sBAAKnD,MAAO,CAAEN,SAAU,IAAKe,OAAQ,OAAQ2C,UAAW,UAAxD,UACE,cAACC,GAAA,EAAD,CAASrD,MAAO,CAAES,OAAQ,YAAarB,MAAO,MAC9C,eAACkE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,SAAUzF,QAAS,EAA5C,UACE,cAACuF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACE,cAACC,EAAA,EAAD,CAAYC,MAAO,SAAUC,cAAY,EAAC3C,MAAO,gBAAjD,qBAIF,cAACkC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACE,cAACC,EAAA,EAAD,CAAYC,MAAO,SAAUC,cAAY,EAAC3C,MAAO,gBAAjD,8BASR+B,GAASa,aAAe,GAETb,UCnBfc,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAACC,GAAD,OAEFC,SAASC,eAAe,SAM1B5B,M","file":"static/js/main.7922c52a.chunk.js","sourcesContent":["import { render } from \"@testing-library/react\";\r\nimport React, { Component } from \"react\";\r\nimport './FlippingCard.css';\r\nimport { Backdrop, Box, Container, createStyles, Fade, makeStyles, Modal, Theme } from \"@material-ui/core\";\r\nimport { ITarotCard } from \"../Interfaces/ICard\";\r\nimport data from \"../Data/tarot-cards.json\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\ninterface Props {\r\n    isEmpty: boolean;\r\n    card:ITarotCard;\r\n}\r\n\r\nclass FlippingCard extends Component<Props, { showComponent: boolean; cards: ITarotCard[]; currentCard: ITarotCard; isClicked:boolean}> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        \r\n        \r\n        this.state = {\r\n            showComponent: false,\r\n            cards: [{ imageaddress: \"\" }],\r\n            currentCard: { imageaddress: \"\" },\r\n            isClicked: false\r\n          };\r\n          this.showDescription  = this.showDescription.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        //gets called immediately after the constructor, before render()\r\n        const currentCards: ITarotCard[] = data.cards;\r\n    \r\n        this.setState({\r\n          cards: currentCards,\r\n          currentCard: this.getRandomCard(currentCards),\r\n        });\r\n      }\r\n\r\n      getRandomCard(currentCards: ITarotCard[]) {\r\n        var card = currentCards[Math.floor(Math.random() * currentCards.length)];\r\n        return card;\r\n      }\r\n    \r\n      updateCard() {\r\n        //this.props.isEmpty = false;\r\n        const currentCards = this.state.cards;\r\n        this.setState({\r\n          currentCard: this.getRandomCard(currentCards),\r\n        });\r\n      }\r\n\r\n    showDescription = () => {\r\n      \r\n        this.setState({\r\n          showComponent: !this.state.showComponent,\r\n        });\r\n      }\r\n\r\n      spin = () => {\r\n        this.setState({isClicked: true});\r\n      }\r\n\r\n      pullAgain = () => {\r\n        this.setState({isClicked: false});\r\n        this.updateCard();\r\n      }\r\n\r\n    render(){\r\n      return(\r\n        <>\r\n        <div className=\"card-container\" onClick={this.spin}>\r\n        {\r\n          this.state.isClicked ?  \r\n          <div className=\"card-back\">\r\n\r\n                <img\r\n                  src={this.state.currentCard.imageaddress}\r\n                  alt=\"img link is broken\"\r\n                  onClick={this.showDescription}\r\n                />\r\n                {this.state.showComponent ?\r\n                <TransitionsModal {...{isEmpty:false, card:this.state.currentCard}} /> :\r\n                null\r\n                }\r\n          </div> :\r\n          <div className=\"card-front\">\r\n            <span className=\"card-text\">\r\n              Click to show card\r\n            </span>\r\n          </div>\r\n        }\r\n        </div>\r\n        <div className=\"button\">{\r\n          this.state.isClicked ?\r\n          <Button variant=\"contained\" onClick={this.pullAgain}>Pull Again</Button> :\r\n          null\r\n        }\r\n        </div>\r\n        </>\r\n      )\r\n    }\r\n}\r\n\r\nexport default FlippingCard\r\n\r\nconst modalStyles = makeStyles((theme: Theme) =>\r\ncreateStyles({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}),\r\n);\r\n\r\n\r\nfunction TransitionsModal(props:Props) {\r\n    const classes = modalStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n  \r\n    const handleOpen = () => {\r\n      \r\n      setOpen(!open);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(!open);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Modal\r\n          aria-labelledby=\"transition-modal-title\"\r\n          aria-describedby=\"transition-modal-description\"\r\n          className={classes.modal}\r\n          open={open}\r\n          onClose={handleClose}\r\n          closeAfterTransition\r\n          BackdropComponent={Backdrop}\r\n          BackdropProps={{\r\n            timeout: 500,\r\n          }}\r\n        >\r\n          <Fade in={open}>\r\n            <div className={classes.paper}>\r\n              <h2 id=\"transition-modal-title\">{props.card.name}</h2>\r\n              <p id=\"transition-modal-description\">{props.card.description}</p>\r\n            </div>\r\n          </Fade>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n\r\n//This should include the randomizing logic and flip the card on clicking\r\n//maybe copy from example code used as template\r\n","import React, { Component } from \"react\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport TarotCard from \"../../Card/Card\";\r\nimport DrawButton from \"../../DrawButton/DrawButton\";\r\nimport { ITarotCard } from \"../../Interfaces/ICard\";\r\nimport data from \"../../Data/tarot-cards.json\";\r\nimport FlippingCard from \"../../FlippingCard/FlippingCard\";\r\n\r\n\r\ninterface Props {\r\n  updateCard?: () => void;\r\n}\r\n\r\nvar styles = {};\r\nvar isEmpty: boolean;\r\n\r\nclass SingleSpread extends Component<\r\n  Props,\r\n  { cards: ITarotCard[]; currentCard: ITarotCard; }\r\n> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.updateCard = this.updateCard.bind(this);\r\n    isEmpty = true;\r\n\r\n    styles = { width: window.innerWidth - 50, height: window.innerHeight - 30 };\r\n\r\n    this.state = {\r\n      cards: [{ imageaddress: \"\" }],\r\n      currentCard: { imageaddress: \"\" }\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    //gets called immediately after the constructor, before render()\r\n    const currentCards: ITarotCard[] = data.cards;\r\n\r\n    this.setState({\r\n      cards: currentCards,\r\n      currentCard: this.getRandomCard(currentCards),\r\n    });\r\n  }\r\n\r\n  getRandomCard(currentCards: ITarotCard[]) {\r\n    var card = currentCards[Math.floor(Math.random() * currentCards.length)];\r\n    return card;\r\n  }\r\n\r\n  updateCard() {\r\n    isEmpty = false;\r\n    const currentCards = this.state.cards;\r\n    this.setState({\r\n      currentCard: this.getRandomCard(currentCards),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <div className=\"App\" style={styles}>\r\n      <div className=\"Single\">\r\n        {/* <div className=\"cardRow\"> */}\r\n        <Container maxWidth=\"sm\">\r\n          <FlippingCard {...{isEmpty:true,card:{}}} />\r\n        </Container>\r\n        {/* </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SingleSpread;\r\n","import { Backdrop, Box, Container, createStyles, Fade, makeStyles, Modal, Theme } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { ITarotCard } from \"../Interfaces/ICard\";\r\nimport \"./TarotCard.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\ninterface Props {\r\n  card: ITarotCard;\r\n  isEmpty: boolean;\r\n}\r\n\r\nvar styles = {};\r\nvar mui = {};\r\nvar view = {};\r\n\r\n\r\nclass TarotCard extends Component<Props, {showComponent: boolean}> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n   \r\n    this.state = {\r\n      showComponent: false,\r\n    };\r\n    this.showDescription  = this.showDescription.bind(this);\r\n  }\r\n\r\n  showDescription = () => {\r\n    this.setState({\r\n      showComponent: !this.state.showComponent,\r\n    });\r\n  }\r\n\r\n  // const classes = useStyles();\r\n\r\n  /* <Card className={classes.root}> */\r\n\r\n  render() {\r\n    if (!this.props.isEmpty) {\r\n      return (\r\n        <Box bgcolor=\"green\" display=\"flex\" width=\"min-content\">\r\n          <div className=\"card-container\" style={view}>\r\n            <Card className=\"card-ui\" style={view}>\r\n              <CardContent>\r\n                <Container maxWidth={false}>\r\n                  <div className=\"front\">\r\n                    <img\r\n                      src={this.props.card.imageaddress}\r\n                      alt=\"img link is broken\"\r\n                      style={styles}\r\n                      onClick={this.showDescription}\r\n                    />\r\n                    {this.state.showComponent ?\r\n                      <TransitionsModal {...this.props} /> :\r\n                        null\r\n                    }\r\n                  </div>\r\n                </Container>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </Box>\r\n      )\r\n    } else {\r\n      return (\r\n        <Box bgcolor=\"green\" display=\"flex\" width=\"min-content\">\r\n          <div className=\"card-container\" style={view}>\r\n            \r\n          </div>\r\n        </Box>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default TarotCard;\r\n\r\n/*\r\n<div className=\"card-container\" style={styles}>\r\n   <div className=\"card\" style={styles}>\r\n     <div className=\"front\" style={styles}>\r\n       <div className=\"eng\" style={styles}>\r\n <div className=\"card-container\">\r\n   <div className=\"card\">\r\n     <div className=\"front\">\r\n       <div className=\"eng\">\r\n        <img\r\n          src={this.props.card.imageaddress}\r\n          alt=\"img link is broken\"\r\n        />\r\n       </div>\r\n     </div>\r\n    { <div className=\"back\" style={styles}> }\r\n     <div className=\"back\">\r\n      <div className=\"han\">{this.props.card.name}</div>\r\n      <div className=\"pin\">{this.props.card.description}</div>\r\n     </div>\r\n   </div>\r\n </div>\r\n */\r\n\r\n const modalStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    modal: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }),\r\n);\r\n\r\n function TransitionsModal(props:Props) {\r\n  const classes = modalStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={handleOpen}>\r\n        react-transition-group\r\n      </button>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <h2 id=\"transition-modal-title\">{props.card.name}</h2>\r\n            <p id=\"transition-modal-description\">{props.card.description}</p>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ninterface Props {\r\n  drawCard: () => void;\r\n}\r\n\r\nvar styles = {};\r\n\r\nclass DrawButton extends Component<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.drawCard = this.drawCard.bind(this);\r\n    styles = {\r\n      margin: 5,\r\n    };\r\n  }\r\n\r\n  drawCard() {\r\n    this.props.drawCard();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"buttonContainer\">\r\n        <Button variant=\"contained\" onClick={this.drawCard} style={styles}>\r\n          Draw Card\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrawButton;\r\n\r\n//        <button className=\"btn\" >\r\n","import React, { Component } from \"react\";\r\nimport TarotCard from \"../../Card/Card\";\r\nimport { ITarotCard } from \"../../Interfaces/ICard\";\r\nimport data from \"../../Data/tarot-cards.json\";\r\nimport DrawButton from \"../../DrawButton/DrawButton\";\r\nimport './ThreeSpread.css';\r\n\r\ninterface Props {\r\n    updateCard?: () => void;\r\n}\r\n\r\nvar isEmpty1: boolean;\r\nvar isEmpty2: boolean;\r\nvar isEmpty3: boolean;\r\n\r\nclass ThreeSpread extends Component<\r\n    Props,\r\n    { cards: ITarotCard[]; currentCard1: ITarotCard; currentCard2: ITarotCard; currentCard3: ITarotCard; }\r\n> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.updateCard1 = this.updateCard1.bind(this);\r\n        this.updateCard2 = this.updateCard2.bind(this);\r\n        this.updateCard3 = this.updateCard2.bind(this);\r\n        isEmpty1 = true;\r\n        isEmpty2 = true;\r\n        isEmpty3 = true;\r\n\r\n        this.state = {\r\n            cards: [{ imageaddress: \"\" }],\r\n            currentCard1: { imageaddress: \"\" },\r\n            currentCard2: { imageaddress: \"\" },\r\n            currentCard3: { imageaddress: \"\" }\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        //gets called immediately after the constructor, before render()\r\n        const currentCards: ITarotCard[] = data.cards;\r\n\r\n        this.setState({\r\n            cards: currentCards,\r\n            currentCard1: this.getRandomCard(currentCards),\r\n            currentCard2: this.getRandomCard(currentCards),\r\n            currentCard3: this.getRandomCard(currentCards),\r\n        });\r\n    }\r\n\r\n\r\n    getRandomCard(currentCards: ITarotCard[]) {\r\n        var card = currentCards[Math.floor(Math.random() * currentCards.length)];\r\n        return card;\r\n    }\r\n\r\n    updateCard1() {\r\n        const currentCards = this.state.cards;\r\n        isEmpty1 = false;\r\n        this.setState({\r\n            currentCard1: this.getRandomCard(currentCards),\r\n        });\r\n    }\r\n    updateCard2() {\r\n        const currentCards = this.state.cards;\r\n\r\n        isEmpty2 = false;\r\n        this.setState({\r\n            currentCard2: this.getRandomCard(currentCards),\r\n        });\r\n    }\r\n    updateCard3() {\r\n        const currentCards = this.state.cards;\r\n        isEmpty3 = false;\r\n        this.setState({\r\n\r\n            currentCard3: this.getRandomCard(currentCards),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid-container\">\r\n                <div className=\"grid-item\">\r\n                    <TarotCard {...{ card: this.state.currentCard1, isEmpty: isEmpty1 }}></TarotCard>\r\n                    <DrawButton drawCard={this.updateCard1} />\r\n                </div>\r\n                <div className=\"grid-item\">\r\n                    <TarotCard {...{ card: this.state.currentCard2, isEmpty: isEmpty2 }}></TarotCard>\r\n                    <DrawButton drawCard={this.updateCard2} />\r\n                </div>\r\n                <div className=\"grid-item\">\r\n                    <TarotCard {...{ card: this.state.currentCard3, isEmpty: isEmpty3 }}></TarotCard>\r\n                    <DrawButton drawCard={this.updateCard3} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ThreeSpread;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { AppBar, Box } from '@material-ui/core';\r\nimport SingleSpread from './Spreads/SingleSpread/SingleSpread';\r\nimport ThreeSpread from './Spreads/ThreeSpread/ThreeSpread';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n    color: 'red',\r\n  },\r\n});\r\n\r\nexport default function CenteredTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Tabs\r\n        value={value}\r\n        onChange={handleChange}\r\n        indicatorColor=\"primary\"\r\n        textColor=\"primary\"\r\n        centered\r\n      >\r\n        <Tab label=\"Single\" />\r\n        <Tab label=\"Three\"  />\r\n        <Tab label=\"Celtic Cross\"  />\r\n      </Tabs>\r\n\r\n      <TabPanel value={value} index={0}>\r\n        <Single></Single>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Three></Three>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <Celtic></Celtic>\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Single() {\r\n    return (\r\n      <div style={{ height:550 }}>\r\n        <SingleSpread></SingleSpread>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function Three() {\r\n    return (      \r\n      <div style={{ height:550 }}>\r\n        <ThreeSpread></ThreeSpread>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  \r\n  function Celtic() {\r\n    return (\r\n      <Paper>\r\n        <div>Item two</div>\r\n      </Paper>\r\n    );\r\n  }\r\n  interface Props{\r\n    children: any;\r\n    value:any;\r\n    index:any;\r\n  }\r\n\r\n  function TabPanel(props:Props) {\r\n    const { children, value, index } = props;\r\n    return (\r\n      <div>\r\n        {value === index && <Box p={3}>{children}</Box>}\r\n      </div>\r\n    );\r\n  }\r\n/*\r\n  <BrowserRouter>\r\n        <div className={classes.root}>\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              fullWidth\r\n            >\r\n              <Tab label=\"Item One\" component={Link} to=\"/one\" />\r\n              <Tab label=\"Item Two\" component={Link} to=\"/two\" />\r\n            </Tabs>\r\n          </AppBar>\r\n\r\n          <Switch>\r\n            <Route path=\"/one\" component={PageShell(ItemOne)} />\r\n            <Route path=\"/two\" component={PageShell(ItemTwo)} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n */","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { IViewportSize } from \"./Interfaces/IViewportSize\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport SingleSpread from \"./Spreads/SingleSpread/SingleSpread\";\r\nimport CenteredTabs from \"./navbar\";\r\n\r\n\r\ninterface Props {\r\n  updateCard?: () => void;\r\n}\r\n\r\nvar viewport: IViewportSize;\r\nvar styles = {};\r\nvar isEmpty: boolean;\r\n\r\nclass App extends Component<\r\n  Props,\r\n  {}\r\n> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n   \r\n  }\r\n\r\n  componentWillMount() {\r\n    //gets called immediately after the constructor, before render()\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <div className=\"App\" style={styles}>\r\n      <div className=\"App\">\r\n        <CenteredTabs></CenteredTabs>\r\n        {/* <div className=\"cardRow\"> */}\r\n\r\n        {/* </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst FooterEx = () => (\r\n  <div style={{ maxWidth: 700, margin: \"auto\", textAlign: \"center\" }}>\r\n    <Divider style={{ margin: \"24px auto\", width: 60 }} />\r\n    <Grid container justify={\"center\"} spacing={2}>\r\n      <Grid item xs={12} sm={6} md={3}>\r\n        <Typography align={\"center\"} gutterBottom color={\"textSecondary\"}>\r\n          About\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={3}>\r\n        <Typography align={\"center\"} gutterBottom color={\"textSecondary\"}>\r\n          Sources\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  </div>\r\n);\r\n\r\nFooterEx.propTypes = {};\r\nFooterEx.defaultProps = {};\r\n\r\nexport default FooterEx;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Footer from \"./Footer/Footer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    <Footer />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}